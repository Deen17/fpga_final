-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity read_from_string_bkb_rom is 
    generic(
             dwidth     : integer := 6; 
             awidth     : integer := 10; 
             mem_size    : integer := 550
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of read_from_string_bkb_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 2=> "000010", 3 to 5=> "000011", 6 to 8=> "000000", 9 to 11=> "000001", 12 to 14=> "000101", 
    15 to 17=> "000100", 18 to 20=> "000110", 21 to 22=> "010001", 23 => "011010", 24 => "100000", 
    25 to 26=> "010000", 27 => "001000", 28 => "011001", 29 => "001000", 30 => "011101", 
    31 to 32=> "000111", 33 to 38=> "001001", 39 to 41=> "001010", 42 to 43=> "010011", 44 to 45=> "010100", 
    46 to 47=> "001100", 48 to 49=> "001011", 50 => "010010", 51 to 53=> "001000", 54 => "010010", 
    55 => "001000", 56 => "010001", 57 => "011011", 58 => "010001", 59 => "011010", 
    60 => "010101", 61 => "100000", 62 => "010110", 63 => "011001", 64 => "001101", 
    65 => "001110", 66 => "011101", 67 => "100011", 68 to 70=> "001100", 71 => "100100", 
    72 => "001100", 73 => "010011", 74 => "100101", 75 => "010011", 76 to 79=> "001111", 
    80 to 83=> "010010", 84 to 85=> "011011", 86 to 89=> "010111", 90 => "100011", 91 => "100001", 
    92 => "100100", 93 => "100001", 94 => "001111", 95 => "100101", 96 => "011110", 
    97 => "011111", 98 => "011000", 99 => "011100", 100 to 101=> "100010", 102 => "010111", 
    103 => "011010", 104 => "100000", 105 => "011001", 106 => "011101", 107 => "100011", 
    108 => "100100", 109 => "100101", 110 to 112=> "000010", 113 to 115=> "000011", 116 to 118=> "000000", 
    119 to 121=> "000001", 122 to 124=> "000101", 125 to 127=> "000100", 128 to 130=> "000110", 131 to 132=> "010001", 
    133 => "011010", 134 => "100000", 135 to 136=> "010000", 137 => "001000", 138 => "011001", 
    139 => "001000", 140 => "011101", 141 to 142=> "000111", 143 to 148=> "001001", 149 to 151=> "001010", 
    152 to 153=> "010011", 154 to 155=> "010100", 156 to 157=> "001100", 158 to 159=> "001011", 160 => "010010", 
    161 to 163=> "001000", 164 => "010010", 165 => "001000", 166 => "010001", 167 => "011011", 
    168 => "010001", 169 => "011010", 170 => "010101", 171 => "100000", 172 => "010110", 
    173 => "011001", 174 => "001101", 175 => "001110", 176 => "011101", 177 => "100011", 
    178 to 180=> "001100", 181 => "100100", 182 => "001100", 183 => "010011", 184 => "100101", 
    185 => "010011", 186 to 189=> "001111", 190 to 193=> "010010", 194 to 195=> "011011", 196 to 199=> "010111", 
    200 => "100011", 201 => "100001", 202 => "100100", 203 => "100001", 204 => "001111", 
    205 => "100101", 206 => "011110", 207 => "011111", 208 => "011000", 209 => "011100", 
    210 to 211=> "100010", 212 => "010111", 213 => "011010", 214 => "100000", 215 => "011001", 
    216 => "011101", 217 => "100011", 218 => "100100", 219 => "100101", 220 to 222=> "000010", 
    223 to 225=> "000011", 226 to 228=> "000000", 229 to 231=> "000001", 232 to 234=> "000101", 235 to 237=> "000100", 
    238 to 240=> "000110", 241 to 242=> "010001", 243 => "011010", 244 => "100000", 245 to 246=> "010000", 
    247 => "001000", 248 => "011001", 249 => "001000", 250 => "011101", 251 to 252=> "000111", 
    253 to 258=> "001001", 259 to 261=> "001010", 262 to 263=> "010011", 264 to 265=> "010100", 266 to 267=> "001100", 
    268 to 269=> "001011", 270 => "010010", 271 to 273=> "001000", 274 => "010010", 275 => "001000", 
    276 => "010001", 277 => "011011", 278 => "010001", 279 => "011010", 280 => "010101", 
    281 => "100000", 282 => "010110", 283 => "011001", 284 => "001101", 285 => "001110", 
    286 => "011101", 287 => "100011", 288 to 290=> "001100", 291 => "100100", 292 => "001100", 
    293 => "010011", 294 => "100101", 295 => "010011", 296 to 299=> "001111", 300 to 303=> "010010", 
    304 to 305=> "011011", 306 to 309=> "010111", 310 => "100011", 311 => "100001", 312 => "100100", 
    313 => "100001", 314 => "001111", 315 => "100101", 316 => "011110", 317 => "011111", 
    318 => "011000", 319 => "011100", 320 to 321=> "100010", 322 => "010111", 323 => "011010", 
    324 => "100000", 325 => "011001", 326 => "011101", 327 => "100011", 328 => "100100", 
    329 => "100101", 330 to 332=> "000010", 333 to 335=> "000011", 336 to 338=> "000000", 339 to 341=> "000001", 
    342 to 344=> "000101", 345 to 347=> "000100", 348 to 350=> "000110", 351 to 352=> "010001", 353 => "011010", 
    354 => "100000", 355 to 356=> "010000", 357 => "001000", 358 => "011001", 359 => "001000", 
    360 => "011101", 361 to 362=> "000111", 363 to 368=> "001001", 369 to 371=> "001010", 372 to 373=> "010011", 
    374 to 375=> "010100", 376 to 377=> "001100", 378 to 379=> "001011", 380 => "010010", 381 to 383=> "001000", 
    384 => "010010", 385 => "001000", 386 => "010001", 387 => "011011", 388 => "010001", 
    389 => "011010", 390 => "010101", 391 => "100000", 392 => "010110", 393 => "011001", 
    394 => "001101", 395 => "001110", 396 => "011101", 397 => "100011", 398 to 400=> "001100", 
    401 => "100100", 402 => "001100", 403 => "010011", 404 => "100101", 405 => "010011", 
    406 to 409=> "001111", 410 to 413=> "010010", 414 to 415=> "011011", 416 to 419=> "010111", 420 => "100011", 
    421 => "100001", 422 => "100100", 423 => "100001", 424 => "001111", 425 => "100101", 
    426 => "011110", 427 => "011111", 428 => "011000", 429 => "011100", 430 to 431=> "100010", 
    432 => "010111", 433 => "011010", 434 => "100000", 435 => "011001", 436 => "011101", 
    437 => "100011", 438 => "100100", 439 => "100101", 440 to 442=> "000010", 443 to 445=> "000011", 
    446 to 448=> "000000", 449 to 451=> "000001", 452 to 454=> "000101", 455 to 457=> "000100", 458 to 460=> "000110", 
    461 to 462=> "010001", 463 => "011010", 464 => "100000", 465 to 466=> "010000", 467 => "001000", 
    468 => "011001", 469 => "001000", 470 => "011101", 471 to 472=> "000111", 473 to 478=> "001001", 
    479 to 481=> "001010", 482 to 483=> "010011", 484 to 485=> "010100", 486 to 487=> "001100", 488 to 489=> "001011", 
    490 => "010010", 491 to 493=> "001000", 494 => "010010", 495 => "001000", 496 => "010001", 
    497 => "011011", 498 => "010001", 499 => "011010", 500 => "010101", 501 => "100000", 
    502 => "010110", 503 => "011001", 504 => "001101", 505 => "001110", 506 => "011101", 
    507 => "100011", 508 to 510=> "001100", 511 => "100100", 512 => "001100", 513 => "010011", 
    514 => "100101", 515 => "010011", 516 to 519=> "001111", 520 to 523=> "010010", 524 to 525=> "011011", 
    526 to 529=> "010111", 530 => "100011", 531 => "100001", 532 => "100100", 533 => "100001", 
    534 => "001111", 535 => "100101", 536 => "011110", 537 => "011111", 538 => "011000", 
    539 => "011100", 540 to 541=> "100010", 542 => "010111", 543 => "011010", 544 => "100000", 
    545 => "011001", 546 => "011101", 547 => "100011", 548 => "100100", 549 => "100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity read_from_string_bkb is
    generic (
        DataWidth : INTEGER := 6;
        AddressRange : INTEGER := 550;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of read_from_string_bkb is
    component read_from_string_bkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    read_from_string_bkb_rom_U :  component read_from_string_bkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


