-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity read_from_string is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    req : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of read_from_string is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "read_from_string,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.537000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=304,HLS_SYN_LUT=709}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv7_6E : STD_LOGIC_VECTOR (6 downto 0) := "1101110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal read_r : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal fail : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal error_array_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal error_array_1 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal error_array_2 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal result_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_ce0 : STD_LOGIC;
    signal result_we0 : STD_LOGIC;
    signal result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_ce1 : STD_LOGIC;
    signal result_we1 : STD_LOGIC;
    signal result_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_r_ce0 : STD_LOGIC;
    signal input_r_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal pointer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal pointer_ce0 : STD_LOGIC;
    signal pointer_we0 : STD_LOGIC;
    signal pointer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pointer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pattern_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal pattern_ce0 : STD_LOGIC;
    signal pattern_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal read_load_reg_614 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_cast3_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_cast3_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_308_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_626 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_cast_fu_372_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_load_cast_reg_657 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_8_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_662 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_1_fu_382_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_666 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_reg_671 : STD_LOGIC_VECTOR (63 downto 0);
    signal pointer_addr_reg_676 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_cast_fu_401_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_cast_reg_681 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal k_reg_686 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_13_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_703 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_712 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal z_1_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_20_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_732 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal result_addr_5_reg_736 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal e_1_fu_582_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal z_reg_232 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_243 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z1_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_reg_265 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_0_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_cast_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_477_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal count_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_1_fu_508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_cast_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_531_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd7_fu_548_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd1_fu_566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_318_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_339_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_343_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_cast_le8_fu_347_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_351_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_368_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_393_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_fu_405_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_fu_409_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal pattern_load_cast_fu_420_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_447_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_451_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_594_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component read_from_string_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component read_from_string_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component read_from_string_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component read_from_string_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    result_U : component read_from_string_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 21,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => result_address0,
        ce0 => result_ce0,
        we0 => result_we0,
        d0 => result_d0,
        q0 => result_q0,
        address1 => result_address1,
        ce1 => result_ce1,
        we1 => result_we1,
        d1 => result_d1,
        q1 => result_q1);

    input_r_U : component read_from_string_cud
    generic map (
        DataWidth => 6,
        AddressRange => 110,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_r_address0,
        ce0 => input_r_ce0,
        q0 => input_r_q0);

    pointer_U : component read_from_string_dEe
    generic map (
        DataWidth => 32,
        AddressRange => 21,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pointer_address0,
        ce0 => pointer_ce0,
        we0 => pointer_we0,
        d0 => pointer_d0,
        q0 => pointer_q0);

    pattern_U : component read_from_string_eOg
    generic map (
        DataWidth => 9,
        AddressRange => 336,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pattern_address0,
        ce0 => pattern_ce0,
        q0 => pattern_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    count_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_20_fu_502_p2 = ap_const_lv1_0) and (tmp_24_reg_712 = ap_const_lv1_0) and (tmp_12_reg_696 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_8_reg_662 = ap_const_lv1_1))) then 
                count_fu_108 <= count_1_fu_508_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                count_fu_108 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    e_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_571_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                e_reg_265 <= e_1_fu_582_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                e_reg_265 <= ap_const_lv5_5;
            end if; 
        end if;
    end process;

    fail_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_571_p2 = ap_const_lv1_1))) then 
                fail(0) <= '0';
                fail(1) <= '1';
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (((tmp_12_reg_696 = ap_const_lv1_0) and (tmp_20_fu_502_p2 = ap_const_lv1_1) and (tmp_8_reg_662 = ap_const_lv1_1)) or ((tmp_12_reg_696 = ap_const_lv1_0) and (tmp_24_reg_712 = ap_const_lv1_1) and (tmp_8_reg_662 = ap_const_lv1_1))))) then 
                fail(0) <= '1';
                fail(1) <= '0';
            end if; 
        end if;
    end process;

    j_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_14_fu_429_p2 = ap_const_lv1_0) and (tmp_12_fu_424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_reg_243 <= j_1_reg_666;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_reg_243 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    z1_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_12_fu_424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_14_fu_429_p2 = ap_const_lv1_1))) then 
                z1_reg_255 <= z_cast3_reg_618;
            elsif (((tmp_20_fu_502_p2 = ap_const_lv1_0) and (tmp_24_reg_712 = ap_const_lv1_0) and (tmp_12_reg_696 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_8_reg_662 = ap_const_lv1_1))) then 
                z1_reg_255 <= z_1_fu_514_p2;
            end if; 
        end if;
    end process;

    z_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((tmp_8_reg_662 = ap_const_lv1_0) or (tmp_20_fu_502_p2 = ap_const_lv1_1) or (tmp_24_reg_712 = ap_const_lv1_1) or (tmp_12_reg_696 = ap_const_lv1_1)))) then 
                z_reg_232 <= i_reg_626;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                z_reg_232 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_24_reg_712 = ap_const_lv1_0) and (tmp_12_reg_696 = ap_const_lv1_0) and (tmp_25_fu_477_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_8_reg_662 = ap_const_lv1_1))) then
                error_array_0 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_24_reg_712 = ap_const_lv1_0) and (tmp_12_reg_696 = ap_const_lv1_0) and (tmp_25_fu_477_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_8_reg_662 = ap_const_lv1_1))) then
                error_array_1 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((tmp_25_fu_477_p1 = ap_const_lv2_1)) and not((tmp_25_fu_477_p1 = ap_const_lv2_0)) and (tmp_24_reg_712 = ap_const_lv1_0) and (tmp_12_reg_696 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_8_reg_662 = ap_const_lv1_1))) then
                error_array_2 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_626 <= i_fu_308_p2;
                    z_cast3_reg_618(6 downto 0) <= z_cast3_fu_298_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    input_load_cast_reg_657(5 downto 0) <= input_load_cast_fu_372_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_1_reg_666 <= j_1_fu_382_p2;
                tmp_8_reg_662 <= tmp_8_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                k_reg_686 <= pointer_q0;
                    tmp_22_cast_reg_681(8 downto 4) <= tmp_22_cast_fu_401_p1(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_0_reg_276 <= result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_8_fu_376_p2 = ap_const_lv1_1))) then
                pointer_addr_reg_676 <= tmp_10_fu_388_p1(5 - 1 downto 0);
                    tmp_10_reg_671(4 downto 0) <= tmp_10_fu_388_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                read_load_reg_614 <= read_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_302_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                read_r <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and ((tmp_16_fu_538_p2 = ap_const_lv1_1) or (tmp_13_reg_703 = ap_const_lv1_1)))) then
                result_addr_5_reg_736 <= tmp_10_reg_671(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_12_reg_696 <= tmp_12_fu_424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_12_fu_424_p2 = ap_const_lv1_1))) then
                tmp_13_reg_703 <= tmp_13_fu_441_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_reg_703 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_16_reg_732 <= tmp_16_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_24_reg_712 <= z1_reg_255(31 downto 31);
            end if;
        end if;
    end process;
    fail(3 downto 2) <= "00";
    z_cast3_reg_618(31 downto 7) <= "0000000000000000000000000";
    input_load_cast_reg_657(9 downto 6) <= "0000";
    tmp_10_reg_671(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_22_cast_reg_681(3 downto 0) <= "0000";
    tmp_22_cast_reg_681(9) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, read_load_reg_614, ap_CS_fsm_state2, tmp_fu_302_p2, tmp_1_fu_322_p2, tmp_4_fu_328_p2, tmp_8_fu_376_p2, tmp_8_reg_662, ap_CS_fsm_state4, tmp_12_fu_424_p2, tmp_12_reg_696, ap_CS_fsm_state6, tmp_24_reg_712, ap_CS_fsm_state8, tmp_20_fu_502_p2, ap_CS_fsm_state14, exitcond_fu_571_p2, tmp_14_fu_429_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((read_load_reg_614 = ap_const_lv1_1) and (tmp_4_fu_328_p2 = ap_const_lv1_0) and (tmp_1_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_302_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((read_load_reg_614 = ap_const_lv1_0) and (tmp_4_fu_328_p2 = ap_const_lv1_0) and (tmp_1_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_302_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((tmp_1_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_4_fu_328_p2 = ap_const_lv1_1) and (tmp_fu_302_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_322_p2 = ap_const_lv1_1) and (tmp_fu_302_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((tmp_8_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_12_fu_424_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((tmp_12_fu_424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_14_fu_429_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((tmp_8_reg_662 = ap_const_lv1_0) or (tmp_20_fu_502_p2 = ap_const_lv1_1) or (tmp_24_reg_712 = ap_const_lv1_1) or (tmp_12_reg_696 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((exitcond_fu_571_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_0_reg_276;
    count_1_fu_508_p2 <= std_logic_vector(unsigned(count_fu_108) + unsigned(ap_const_lv32_1));
    e_1_fu_582_p2 <= std_logic_vector(unsigned(e_reg_265) + unsigned(ap_const_lv5_1));
    exitcond_fu_571_p2 <= "1" when (e_reg_265 = ap_const_lv5_15) else "0";
    extLd1_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(error_array_2),32));
    extLd7_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(error_array_0),32));
    extLd_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(error_array_1),32));
    i_fu_308_p2 <= std_logic_vector(unsigned(z_reg_232) + unsigned(ap_const_lv7_1));
    input_load_cast_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_r_q0),10));

    input_r_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, tmp_s_fu_334_p1, tmp_19_fu_469_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address0 <= tmp_19_fu_469_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_address0 <= tmp_s_fu_334_p1(7 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_382_p2 <= std_logic_vector(unsigned(j_reg_243) + unsigned(ap_const_lv5_1));
    k_1_fu_435_p2 <= std_logic_vector(unsigned(k_reg_686) + unsigned(ap_const_lv32_1));

    pattern_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_23_cast_fu_415_p1, tmp_24_cast_fu_456_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pattern_address0 <= tmp_24_cast_fu_456_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pattern_address0 <= tmp_23_cast_fu_415_p1(9 - 1 downto 0);
        else 
            pattern_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    pattern_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            pattern_ce0 <= ap_const_logic_1;
        else 
            pattern_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pattern_load_cast_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pattern_q0),10));

    pointer_address0_assign_proc : process(ap_CS_fsm_state4, tmp_10_fu_388_p1, pointer_addr_reg_676, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            pointer_address0 <= pointer_addr_reg_676;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pointer_address0 <= tmp_10_fu_388_p1(5 - 1 downto 0);
        else 
            pointer_address0 <= "XXXXX";
        end if; 
    end process;


    pointer_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            pointer_ce0 <= ap_const_logic_1;
        else 
            pointer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pointer_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, k_1_fu_435_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pointer_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pointer_d0 <= k_1_fu_435_p2;
        else 
            pointer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pointer_we0_assign_proc : process(tmp_12_fu_424_p2, ap_CS_fsm_state6, tmp_13_reg_703, tmp_16_fu_538_p2, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and ((tmp_16_fu_538_p2 = ap_const_lv1_1) or (tmp_13_reg_703 = ap_const_lv1_1))) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_12_fu_424_p2 = ap_const_lv1_1)))) then 
            pointer_we0 <= ap_const_logic_1;
        else 
            pointer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_address0_assign_proc : process(read_load_reg_614, ap_CS_fsm_state2, tmp_fu_302_p2, tmp_1_fu_322_p2, tmp_4_fu_328_p2, ap_CS_fsm_state14, exitcond_fu_571_p2, ap_CS_fsm_state13, tmp_9_fu_339_p1, tmp_5_fu_343_p1, tmp_2_fu_368_p1, tmp_7_fu_577_p1, tmp_6_fu_594_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_571_p2 = ap_const_lv1_1))) then 
            result_address0 <= tmp_6_fu_594_p1(5 - 1 downto 0);
        elsif (((exitcond_fu_571_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            result_address0 <= tmp_7_fu_577_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            result_address0 <= ap_const_lv5_3;
        elsif (((tmp_fu_302_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            result_address0 <= tmp_2_fu_368_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_322_p2 = ap_const_lv1_1) and (tmp_fu_302_p2 = ap_const_lv1_1))) then 
            result_address0 <= ap_const_lv5_0;
        elsif (((tmp_1_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_4_fu_328_p2 = ap_const_lv1_1) and (tmp_fu_302_p2 = ap_const_lv1_1))) then 
            result_address0 <= tmp_5_fu_343_p1(5 - 1 downto 0);
        elsif (((read_load_reg_614 = ap_const_lv1_1) and (tmp_4_fu_328_p2 = ap_const_lv1_0) and (tmp_1_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_302_p2 = ap_const_lv1_1))) then 
            result_address0 <= tmp_9_fu_339_p1(5 - 1 downto 0);
        else 
            result_address0 <= "XXXXX";
        end if; 
    end process;


    result_address1_assign_proc : process(ap_CS_fsm_state2, tmp_10_reg_671, ap_CS_fsm_state8, ap_CS_fsm_state9, result_addr_5_reg_736, ap_CS_fsm_state13, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            result_address1 <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            result_address1 <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            result_address1 <= tmp_10_reg_671(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            result_address1 <= result_addr_5_reg_736;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            result_address1 <= ap_const_lv5_1;
        else 
            result_address1 <= "XXXXX";
        end if; 
    end process;


    result_ce0_assign_proc : process(read_load_reg_614, ap_CS_fsm_state2, tmp_fu_302_p2, tmp_1_fu_322_p2, tmp_4_fu_328_p2, ap_CS_fsm_state14, exitcond_fu_571_p2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((tmp_fu_302_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_322_p2 = ap_const_lv1_1) and (tmp_fu_302_p2 = ap_const_lv1_1)) or ((tmp_1_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_4_fu_328_p2 = ap_const_lv1_1) and (tmp_fu_302_p2 = ap_const_lv1_1)) or ((read_load_reg_614 = ap_const_lv1_1) and (tmp_4_fu_328_p2 = ap_const_lv1_0) and (tmp_1_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_302_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_571_p2 = ap_const_lv1_1)) or ((exitcond_fu_571_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            result_ce1 <= ap_const_logic_1;
        else 
            result_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    result_d0_assign_proc : process(ap_CS_fsm_state2, tmp_fu_302_p2, tmp_1_fu_322_p2, ap_CS_fsm_state14, exitcond_fu_571_p2, ap_CS_fsm_state13, extLd_fu_557_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            result_d0 <= extLd_fu_557_p1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_322_p2 = ap_const_lv1_1) and (tmp_fu_302_p2 = ap_const_lv1_1)) or ((exitcond_fu_571_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            result_d0 <= ap_const_lv32_100;
        else 
            result_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state12, tmp_3_cast_fu_357_p1, tmp_17_fu_531_p2, extLd7_fu_548_p1, extLd1_fu_566_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            result_d1 <= extLd1_fu_566_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            result_d1 <= extLd7_fu_548_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            result_d1 <= tmp_17_fu_531_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            result_d1 <= tmp_3_cast_fu_357_p1;
        else 
            result_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_we0_assign_proc : process(ap_CS_fsm_state2, tmp_fu_302_p2, tmp_1_fu_322_p2, ap_CS_fsm_state14, exitcond_fu_571_p2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_322_p2 = ap_const_lv1_1) and (tmp_fu_302_p2 = ap_const_lv1_1)) or ((exitcond_fu_571_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_we1_assign_proc : process(ap_CS_fsm_state2, tmp_fu_302_p2, tmp_1_fu_322_p2, tmp_8_reg_662, tmp_12_reg_696, tmp_13_reg_703, ap_CS_fsm_state8, tmp_16_reg_732, ap_CS_fsm_state13, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_322_p2 = ap_const_lv1_1) and (tmp_fu_302_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (((tmp_16_reg_732 = ap_const_lv1_1) and (tmp_12_reg_696 = ap_const_lv1_1) and (tmp_8_reg_662 = ap_const_lv1_1)) or ((tmp_13_reg_703 = ap_const_lv1_1) and (tmp_12_reg_696 = ap_const_lv1_1) and (tmp_8_reg_662 = ap_const_lv1_1)))))) then 
            result_we1 <= ap_const_logic_1;
        else 
            result_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_243),64));
    tmp_11_fu_318_p1 <= fail(3 - 1 downto 0);
    tmp_12_fu_424_p2 <= "1" when (input_load_cast_reg_657 = pattern_load_cast_fu_420_p1) else "0";
    tmp_13_fu_441_p2 <= "1" when (k_1_fu_435_p2 = ap_const_lv32_10) else "0";
    tmp_14_fu_429_p2 <= "1" when (j_reg_243 = ap_const_lv5_14) else "0";
    tmp_15_fu_393_p3 <= (j_reg_243 & ap_const_lv4_0);
    tmp_16_fu_538_p2 <= "1" when (pattern_q0 = ap_const_lv9_100) else "0";
    tmp_17_fu_531_p2 <= std_logic_vector(unsigned(result_q1) + unsigned(ap_const_lv32_1));
    tmp_18_fu_405_p1 <= pointer_q0(10 - 1 downto 0);
    tmp_19_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z1_reg_255),64));
    tmp_1_fu_322_p2 <= "1" when (tmp_11_fu_318_p1 = ap_const_lv3_1) else "0";
    tmp_20_fu_502_p2 <= "1" when (count_fu_108 = ap_const_lv32_3) else "0";
    tmp_21_fu_409_p2 <= std_logic_vector(unsigned(tmp_22_cast_fu_401_p1) + unsigned(tmp_18_fu_405_p1));
    tmp_22_cast_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_393_p3),10));
    tmp_22_fu_447_p1 <= k_1_fu_435_p2(10 - 1 downto 0);
        tmp_23_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_fu_409_p2),64));

    tmp_23_fu_451_p2 <= std_logic_vector(unsigned(tmp_22_fu_447_p1) + unsigned(tmp_22_cast_reg_681));
        tmp_24_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_fu_451_p2),64));

    tmp_25_fu_477_p1 <= count_fu_108(2 - 1 downto 0);
    tmp_2_fu_368_p0 <= req;
        tmp_2_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_368_p0),64));

        tmp_3_cast_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_351_p2),32));

    tmp_3_fu_351_p2 <= std_logic_vector(unsigned(z_cast_le8_fu_347_p1) + unsigned(ap_const_lv8_FF));
    tmp_4_fu_328_p2 <= "1" when (tmp_11_fu_318_p1 = ap_const_lv3_2) else "0";
    tmp_5_fu_343_p0 <= req;
        tmp_5_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_343_p0),64));

    tmp_6_fu_594_p0 <= req;
        tmp_6_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_594_p0),64));

    tmp_7_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e_reg_265),64));
    tmp_8_fu_376_p2 <= "1" when (unsigned(j_reg_243) < unsigned(ap_const_lv5_15)) else "0";
    tmp_9_fu_339_p0 <= req;
        tmp_9_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_339_p0),64));

    tmp_fu_302_p2 <= "1" when (unsigned(z_reg_232) < unsigned(ap_const_lv7_6E)) else "0";
    tmp_s_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z_reg_232),64));
    z_1_fu_514_p2 <= std_logic_vector(unsigned(z1_reg_255) + unsigned(ap_const_lv32_FFFFFFFF));
    z_cast3_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z_reg_232),32));
    z_cast_le8_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z_reg_232),8));
end behav;
