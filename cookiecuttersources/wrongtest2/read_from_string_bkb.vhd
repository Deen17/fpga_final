-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity read_from_string_bkb_rom is 
    generic(
             dwidth     : integer := 7; 
             awidth     : integer := 7; 
             mem_size    : integer := 110
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of read_from_string_bkb_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "0000010", 1 => "1100011", 2 => "0000010", 3 to 5=> "0000011", 
    6 to 8=> "0000000", 9 to 11=> "0000001", 12 to 14=> "0000101", 15 to 17=> "0000100", 
    18 to 20=> "0000110", 21 to 22=> "0010001", 23 => "0011010", 24 => "0100000", 
    25 to 26=> "0010000", 27 => "0001000", 28 => "0011001", 29 => "0001000", 
    30 => "0011101", 31 to 32=> "0000111", 33 to 38=> "0001001", 39 to 41=> "0001010", 
    42 to 43=> "0010011", 44 to 45=> "0010100", 46 to 47=> "0001100", 48 to 49=> "0001011", 
    50 => "0010010", 51 to 53=> "0001000", 54 => "0010010", 55 => "0001000", 
    56 => "0010001", 57 => "0011011", 58 => "0010001", 59 => "0011010", 
    60 => "0010101", 61 => "0100000", 62 => "0010110", 63 => "0011001", 
    64 => "0001101", 65 => "0001110", 66 => "0011101", 67 => "0100011", 
    68 to 70=> "0001100", 71 => "0100100", 72 => "0001100", 73 => "0010011", 
    74 => "0100101", 75 => "0010011", 76 to 79=> "0001111", 80 to 83=> "0010010", 
    84 to 85=> "0011011", 86 to 89=> "0010111", 90 => "0100011", 91 => "0100001", 
    92 => "0100100", 93 => "0100001", 94 => "0001111", 95 => "0100101", 
    96 => "0011110", 97 => "0011111", 98 => "0011000", 99 => "0011100", 
    100 to 101=> "0100010", 102 => "0010111", 103 => "0011010", 104 => "0100000", 
    105 => "0011001", 106 => "0011101", 107 => "0100011", 108 => "0100100", 
    109 => "0100101" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity read_from_string_bkb is
    generic (
        DataWidth : INTEGER := 7;
        AddressRange : INTEGER := 110;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of read_from_string_bkb is
    component read_from_string_bkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    read_from_string_bkb_rom_U :  component read_from_string_bkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


