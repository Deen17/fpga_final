-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity read_from_string_bkb_rom is 
    generic(
             dwidth     : integer := 7; 
             awidth     : integer := 10; 
             mem_size    : integer := 550
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of read_from_string_bkb_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 2=> "0000010", 3 to 5=> "0000011", 6 to 8=> "0000000", 9 to 11=> "0000001", 
    12 to 14=> "0000101", 15 to 17=> "0000100", 18 to 20=> "0000110", 21 to 22=> "0010001", 
    23 => "0011010", 24 => "0100000", 25 to 26=> "0010000", 27 => "0001000", 
    28 => "0011001", 29 => "0001000", 30 => "0011101", 31 to 32=> "0000111", 
    33 to 38=> "0001001", 39 to 41=> "0001010", 42 to 43=> "0010011", 44 to 45=> "0010100", 
    46 to 47=> "0001100", 48 to 49=> "0001011", 50 => "0010010", 51 to 53=> "0001000", 
    54 => "0010010", 55 => "0001000", 56 => "0010001", 57 => "0011011", 
    58 => "0010001", 59 => "0011010", 60 => "0010101", 61 => "0100000", 
    62 => "0010110", 63 => "0011001", 64 => "0001101", 65 => "0001110", 
    66 => "0011101", 67 => "0100011", 68 to 70=> "0001100", 71 => "0100100", 
    72 => "0001100", 73 => "0010011", 74 => "0100101", 75 => "0010011", 
    76 to 79=> "0001111", 80 to 83=> "0010010", 84 to 85=> "0011011", 86 to 89=> "0010111", 
    90 => "0100011", 91 => "0100001", 92 => "0100100", 93 => "0100001", 
    94 => "0001111", 95 => "0100101", 96 => "0011110", 97 => "0011111", 
    98 => "0011000", 99 => "0011100", 100 to 101=> "0100010", 102 => "0010111", 
    103 => "0011010", 104 => "0100000", 105 => "0011001", 106 => "0011101", 
    107 => "0100011", 108 => "0100100", 109 => "0100101", 110 to 112=> "0000010", 
    113 to 115=> "0000011", 116 to 118=> "0000000", 119 to 121=> "0000001", 122 to 124=> "0000101", 
    125 to 127=> "0000100", 128 to 130=> "0000110", 131 to 132=> "0010001", 133 => "0011010", 
    134 => "0100000", 135 to 136=> "0010000", 137 => "0001000", 138 => "0011001", 
    139 => "0001000", 140 => "0011101", 141 to 142=> "0000111", 143 to 148=> "0001001", 
    149 to 151=> "0001010", 152 to 153=> "0010011", 154 to 155=> "0010100", 156 to 157=> "0001100", 
    158 to 159=> "0001011", 160 => "0010010", 161 to 163=> "0001000", 164 => "0010010", 
    165 => "0001000", 166 => "0010001", 167 => "0011011", 168 => "0010001", 
    169 => "0011010", 170 => "0010101", 171 => "0100000", 172 => "0010110", 
    173 => "0011001", 174 => "0001101", 175 => "0001110", 176 => "0011101", 
    177 => "0100011", 178 to 180=> "0001100", 181 => "0100100", 182 => "0001100", 
    183 => "0010011", 184 => "0100101", 185 => "0010011", 186 to 189=> "0001111", 
    190 to 193=> "0010010", 194 to 195=> "0011011", 196 to 199=> "0010111", 200 => "0100011", 
    201 => "0100001", 202 => "0100100", 203 => "0100001", 204 => "0001111", 
    205 => "0100101", 206 => "0011110", 207 => "0011111", 208 => "0011000", 
    209 => "0011100", 210 to 211=> "0100010", 212 => "0010111", 213 => "0011010", 
    214 => "0100000", 215 => "0011001", 216 => "0011101", 217 => "0100011", 
    218 => "0100100", 219 => "0100101", 220 to 222=> "0000010", 223 to 225=> "0000011", 
    226 to 228=> "0000000", 229 to 231=> "0000001", 232 to 234=> "0000101", 235 to 237=> "0000100", 
    238 to 240=> "0000110", 241 to 242=> "0010001", 243 => "0011010", 244 => "0100000", 
    245 to 246=> "0010000", 247 => "0001000", 248 => "0011001", 249 => "0001000", 
    250 => "0011101", 251 to 252=> "0000111", 253 to 258=> "0001001", 259 to 261=> "0001010", 
    262 to 263=> "0010011", 264 to 265=> "0010100", 266 to 267=> "0001100", 268 to 269=> "0001011", 
    270 => "0010010", 271 to 273=> "0001000", 274 => "0010010", 275 => "0001000", 
    276 => "0010001", 277 => "0011011", 278 => "0010001", 279 => "0011010", 
    280 => "0010101", 281 => "0100000", 282 => "0010110", 283 => "0011001", 
    284 => "0001101", 285 => "0001110", 286 => "0011101", 287 => "0100011", 
    288 to 290=> "0001100", 291 => "0100100", 292 => "0001100", 293 => "0010011", 
    294 => "0100101", 295 => "0010011", 296 to 299=> "0001111", 300 to 303=> "0010010", 
    304 to 305=> "0011011", 306 to 309=> "0010111", 310 => "0100011", 311 => "0100001", 
    312 => "0100100", 313 => "0100001", 314 => "0001111", 315 => "0100101", 
    316 => "0011110", 317 => "0011111", 318 => "0011000", 319 => "0011100", 
    320 to 321=> "0100010", 322 => "0010111", 323 => "0011010", 324 => "0100000", 
    325 => "0011001", 326 => "0011101", 327 => "0100011", 328 => "0100100", 
    329 => "0100101", 330 to 332=> "0000010", 333 to 335=> "0000011", 336 to 338=> "0000000", 
    339 to 341=> "0000001", 342 to 344=> "0000101", 345 to 347=> "0000100", 348 to 350=> "0000110", 
    351 to 352=> "0010001", 353 => "0011010", 354 => "0100000", 355 to 356=> "0010000", 
    357 => "0001000", 358 => "0011001", 359 => "0001000", 360 => "0011101", 
    361 to 362=> "0000111", 363 to 364=> "0001001", 365 => "1100011", 366 to 368=> "0001001", 
    369 to 371=> "0001010", 372 to 373=> "0010011", 374 to 375=> "0010100", 376 to 377=> "0001100", 
    378 to 379=> "0001011", 380 => "0010010", 381 to 383=> "0001000", 384 => "0010010", 
    385 => "0001000", 386 => "0010001", 387 => "0011011", 388 => "0010001", 
    389 => "0011010", 390 => "0010101", 391 => "0100000", 392 => "0010110", 
    393 => "0011001", 394 => "0001101", 395 => "0001110", 396 => "0011101", 
    397 => "0100011", 398 to 400=> "0001100", 401 => "0100100", 402 => "0001100", 
    403 => "0010011", 404 => "0100101", 405 => "0010011", 406 to 409=> "0001111", 
    410 to 413=> "0010010", 414 to 415=> "0011011", 416 to 419=> "0010111", 420 => "0100011", 
    421 => "0100001", 422 => "0100100", 423 => "0100001", 424 => "0001111", 
    425 => "0100101", 426 => "0011110", 427 => "0011111", 428 => "0011000", 
    429 => "0011100", 430 to 431=> "0100010", 432 => "0010111", 433 => "0011010", 
    434 => "0100000", 435 => "0011001", 436 => "0011101", 437 => "0100011", 
    438 => "0100100", 439 => "0100101", 440 to 442=> "0000010", 443 to 445=> "0000011", 
    446 to 448=> "0000000", 449 to 451=> "0000001", 452 to 454=> "0000101", 455 to 457=> "0000100", 
    458 to 460=> "0000110", 461 to 462=> "0010001", 463 => "0011010", 464 => "0100000", 
    465 to 466=> "0010000", 467 => "0001000", 468 => "0011001", 469 => "0001000", 
    470 => "0011101", 471 to 472=> "0000111", 473 to 478=> "0001001", 479 to 481=> "0001010", 
    482 to 483=> "0010011", 484 to 485=> "0010100", 486 to 487=> "0001100", 488 to 489=> "0001011", 
    490 => "0010010", 491 to 493=> "0001000", 494 => "0010010", 495 => "0001000", 
    496 => "0010001", 497 => "0011011", 498 => "0010001", 499 => "0011010", 
    500 => "0010101", 501 => "0100000", 502 => "0010110", 503 => "0011001", 
    504 => "0001101", 505 => "0001110", 506 => "0011101", 507 => "0100011", 
    508 to 510=> "0001100", 511 => "0100100", 512 => "0001100", 513 => "0010011", 
    514 => "0100101", 515 => "0010011", 516 to 519=> "0001111", 520 to 523=> "0010010", 
    524 to 525=> "0011011", 526 to 529=> "0010111", 530 => "0100011", 531 => "0100001", 
    532 => "0100100", 533 => "0100001", 534 => "0001111", 535 => "0100101", 
    536 => "0011110", 537 => "0011111", 538 => "0011000", 539 => "0011100", 
    540 to 541=> "0100010", 542 => "0010111", 543 => "0011010", 544 => "0100000", 
    545 => "0011001", 546 => "0011101", 547 => "0100011", 548 => "0100100", 
    549 => "0100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity read_from_string_bkb is
    generic (
        DataWidth : INTEGER := 7;
        AddressRange : INTEGER := 550;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of read_from_string_bkb is
    component read_from_string_bkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    read_from_string_bkb_rom_U :  component read_from_string_bkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


